// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID        string  `json:"id"`
	Body      string  `json:"body"`
	CommentID string  `json:"commentId"`
	CreatedAt *string `json:"createdAt"`
}

type Image struct {
	ID       string `json:"id"`
	URL      string `json:"url"`
	ObjectID string `json:"objectId"`
}

type Task struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Body      string `json:"body"`
	UserID    string `json:"userId"`
	CreatedAt string `json:"createdAt"`
}

type User struct {
	ID             string `json:"id"`
	Name           string `json:"name"`
	PasswordDigest string `json:"passwordDigest"`
}

type ImageType string

const (
	ImageTypeTask    ImageType = "TASK"
	ImageTypeComment ImageType = "COMMENT"
)

var AllImageType = []ImageType{
	ImageTypeTask,
	ImageTypeComment,
}

func (e ImageType) IsValid() bool {
	switch e {
	case ImageTypeTask, ImageTypeComment:
		return true
	}
	return false
}

func (e ImageType) String() string {
	return string(e)
}

func (e *ImageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageType", str)
	}
	return nil
}

func (e ImageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
